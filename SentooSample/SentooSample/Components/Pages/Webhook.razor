@page "/webhook"
@rendermode InteractiveServer
@using SentooSample.Services

@inject WebhookService WebhookService

<PageTitle>Sentoo Webhook</PageTitle>

<h1>Sentoo Webhook Listener</h1>

<p>This page listens for incoming Sentoo webhook requests.</p>

<!-- Show the received data and the status update -->
@if (!string.IsNullOrEmpty(WebhookService.ReceivedTransactionId))
{
    <div class="alert alert-success">
        <h4>Webhook Received:</h4>
        <p><strong>Transaction ID:</strong> @WebhookService.ReceivedTransactionId</p>
        <p><strong>Raw Webhook Data:</strong></p>
        <textarea class="form-control" rows="6" readonly>@WebhookService.WebhookData</textarea>

        <h4 class="mt-3">Payment Status</h4>
        <textarea class="form-control text-success" rows="4" readonly>@WebhookService.PaymentStatus</textarea>
    </div>
}
else
{
    <p>No webhook data received yet.</p>
}

@code {
    protected override void OnInitialized()
    {
        // Add OnChange event to update the UI when the webhook data changes
        WebhookService.OnChange += async () => await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        // Detach the OnChange event when the component is disposed
        WebhookService.OnChange -= async () => await InvokeAsync(StateHasChanged);
    }
}
